let express,mongoose,cors,readdirSync;_246‍.w("express",[["default",["express"],function(v){express=v}]]);_246‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_246‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_246‍.w("fs",[["readdirSync",["readdirSync"],function(v){readdirSync=v}]]);





const morgan = require("morgan");
require("dotenv").config();

const app = express();
const http = require("http").createServer(app);
const io = require("socket.io")(http, {
  cors: {
    origin: "http://localhost:3000",
    method: ["GET", "POST"],
    allowedHEADERS: ["Content-type"],
  },
});

// db
mongoose
  .connect(process.env.DATABASE, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("DB connected"))
  .catch((err) => _246‍.g.console.log("DB CONNECTION ERROR => ", err));

// middlewares
app.use(express.json({ limit: "5mb" }));
app.use(express.urlencoded({ extended: true }));
app.use(
  cors({
    origin: [process.env.CLIENT_URL],
  })
);

// autoload routes
readdirSync("./routes").map((r) => app.use("/api", require(`./routes/${r}`)));

// // socket.io
// io.on("connect", (socket) => {
//   // console.log("SOCKET>IO", socket.id)
//   socket.on("send-message", (message) => {
//     //console.log("new message received => ", message);
//   socket.broadcast.emit("receive-message", message);
//   })
// });

// socket.io
io.on("connect", (socket) => {
  // console.log("SOCKET>IO", socket.id)
  socket.on("new-post", (newPost) => {
    //console.log("new message received => ", message);
  socket.broadcast.emit("newPost", newPost);
  })
});

const port = process.env.PORT || 8000;

http.listen(port, () => console.log(`Server running on port ${port}`));
